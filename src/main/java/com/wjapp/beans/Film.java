package com.wjapp.beans;
// Generated 2017-7-14 15:45:30 by Hibernate Tools 5.2.3.Final

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cascade;

/**
 * Film generated by hbm2java
 */
@Entity
@Table(name = "film", catalog = "moviedb")
public class Film implements java.io.Serializable {

	private Short filmId;
	private Language languageByLanguageId;
	private Language languageByOriginalLanguageId;
	private String title;
	private String description;
	private String releaseYear;
	private byte playDuration;
	private BigDecimal playRate;
	private Short length;
	private BigDecimal replacementCost;
	private String rating;
	private String specialFeatures;
	private Date lastUpdate;
	private Set<Playdata> playdatas = new HashSet<Playdata>(0);
	private Set<Actor> filmActors = new HashSet<Actor>(0);
	private Set<Category> filmCategories = new HashSet<Category>(0);

	public Film() {
	}
	
	public Film(Short id,String title) {
		this.filmId = id;
		this.title = title;
	}

	public Film(Language languageByLanguageId, String title, byte playDuration, BigDecimal playRate,
			BigDecimal replacementCost, Date lastUpdate) {
		this.languageByLanguageId = languageByLanguageId;
		this.title = title;
		this.playDuration = playDuration;
		this.playRate = playRate;
		this.replacementCost = replacementCost;
		this.lastUpdate = lastUpdate;
	}

	public Film(Language languageByLanguageId, Language languageByOriginalLanguageId, String title, String description,
			String releaseYear, byte playDuration, BigDecimal playRate, Short length, BigDecimal replacementCost,
			String rating, String specialFeatures, Date lastUpdate, Set<Playdata> playdatas, Set<Actor> filmActors,
			Set<Category> filmCategories) {
		this.languageByLanguageId = languageByLanguageId;
		this.languageByOriginalLanguageId = languageByOriginalLanguageId;
		this.title = title;
		this.description = description;
		this.releaseYear = releaseYear;
		this.playDuration = playDuration;
		this.playRate = playRate;
		this.length = length;
		this.replacementCost = replacementCost;
		this.rating = rating;
		this.specialFeatures = specialFeatures;
		this.lastUpdate = lastUpdate;
		this.playdatas = playdatas;
		this.filmActors = filmActors;
		this.filmCategories = filmCategories;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "film_id", unique = true, nullable = false)
	public Short getFilmId() {
		return this.filmId;
	}

	public void setFilmId(Short filmId) {
		this.filmId = filmId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "language_id", nullable = false)
	public Language getLanguageByLanguageId() {
		return this.languageByLanguageId;
	}

	public void setLanguageByLanguageId(Language languageByLanguageId) {
		this.languageByLanguageId = languageByLanguageId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "original_language_id")
	public Language getLanguageByOriginalLanguageId() {
		return this.languageByOriginalLanguageId;
	}

	public void setLanguageByOriginalLanguageId(Language languageByOriginalLanguageId) {
		this.languageByOriginalLanguageId = languageByOriginalLanguageId;
	}

	@Column(name = "title", nullable = false)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "description", length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	//@Temporal(TemporalType.DATE)
	@Column(name = "release_year",nullable = true)
	public String getReleaseYear() {
		return this.releaseYear;
	}

	public void setReleaseYear(String releaseYear) {
		this.releaseYear = releaseYear;
	}

	@Column(name = "play_duration", nullable = false)
	public byte getPlayDuration() {
		return this.playDuration;
	}

	public void setPlayDuration(byte playDuration) {
		this.playDuration = playDuration;
	}

	@Column(name = "play_rate", nullable = false, precision = 4)
	public BigDecimal getPlayRate() {
		return this.playRate;
	}

	public void setPlayRate(BigDecimal playRate) {
		this.playRate = playRate;
	}

	@Column(name = "length")
	public Short getLength() {
		return this.length;
	}

	public void setLength(Short length) {
		this.length = length;
	}

	@Column(name = "replacement_cost", nullable = false, precision = 5)
	public BigDecimal getReplacementCost() {
		return this.replacementCost;
	}

	public void setReplacementCost(BigDecimal replacementCost) {
		this.replacementCost = replacementCost;
	}

	@Column(name = "rating", length = 5)
	public String getRating() {
		return this.rating;
	}

	public void setRating(String rating) {
		this.rating = rating;
	}

	@Column(name = "special_features", length = 54)
	public String getSpecialFeatures() {
		return this.specialFeatures;
	}

	public void setSpecialFeatures(String specialFeatures) {
		this.specialFeatures = specialFeatures;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_update", nullable = true, length = 19)
	public Date getLastUpdate() {
		return this.lastUpdate;
	}

	public void setLastUpdate(Date lastUpdate) {
		this.lastUpdate = lastUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "film")
	public Set<Playdata> getPlaydatas() {
		return this.playdatas;
	}

	public void setPlaydatas(Set<Playdata> playdatas) {
		this.playdatas = playdatas;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "film")
	//@Cascade(value=org.hibernate.annotations.CascadeType.SAVE_UPDATE)
	
	@ManyToMany()
	@JoinTable(
	        name = "film_actor",
	        joinColumns = @JoinColumn(name = "film_id"),
	        inverseJoinColumns = @JoinColumn(name = "actor_id")
	)
	@Cascade(value=org.hibernate.annotations.CascadeType.SAVE_UPDATE)
	public Set<Actor> getFilmActors() {
		return this.filmActors;
	}

	public void setFilmActors(Set<Actor> filmActors) {
		this.filmActors = filmActors;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "film")
	//@Cascade(value=org.hibernate.annotations.CascadeType.SAVE_UPDATE)
	
	@ManyToMany()
	@JoinTable(
	        name = "film_category",
	        joinColumns = @JoinColumn(name = "film_id"),
	        inverseJoinColumns = @JoinColumn(name = "category_id")
	)
	@Cascade(value=org.hibernate.annotations.CascadeType.SAVE_UPDATE)
	public Set<Category> getFilmCategories() {
		return this.filmCategories;
	}

	public void setFilmCategories(Set<Category> filmCategories) {
		this.filmCategories = filmCategories;
	}

}
